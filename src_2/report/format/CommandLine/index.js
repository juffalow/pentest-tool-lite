// @flow
import Symbols from '../../symbols';

class CommandLine {
  namespaces: Array<Object>;

  constructor(messages: Array<Message>) {
    this.namespaces = this.toNamespaces(messages);
  }

  format() {
    const str = [];

    Object.keys(this.namespaces).forEach((namespace) => {
      console.log(this.formatNamespace(namespace, this.namespaces[namespace]));
    });

    return str;
  }

  formatNamespace(namespace: string, messages: Array<Message>) {
    const str = [ namespace ].concat(messages.map(message => this.formatMessage(message)));

    return str.join('\n');
  }

  formatMessage(message: Message) {
    switch(message.type) {
      case 0:
        return '\x1b[32m' + Symbols.success + '\x1b[0m \x1b[2m' + message.result + '\x1b[0m';
      case 1:
        return '\x1b[33m' + Symbols.warning + '\x1b[0m ' + message.result;
      case 2:
        return '\x1b[31m' + Symbols.error + '\x1b[0m \x1b[2m' + message.result + '\x1b[0m';
    }
    return message.result;
  }

  toNamespaces(messages: Array<Message>) {
    const namespaces = {};

    messages.forEach((message) => {
      if (!namespaces.hasOwnProperty(message.namespace)) {
        namespaces[message.namespace] = [];
      }

      namespaces[message.namespace].push(message);
    });

    return namespaces;
  }

}

export default CommandLine;
