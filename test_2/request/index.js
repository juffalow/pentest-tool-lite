import sinon from 'sinon';
import chai from 'chai';
const expect = chai.expect;
import request from 'request';
import Request from '../../src_2/request';
import BlackHole from '../../src_2/request/cache/BlackHole';

describe('test Request', function() {
  const sandbox = sinon.createSandbox();

  beforeEach(function() {
    sandbox.stub(request, 'get').yields({}, {headers:{ 'Content-Type': 'text/html', 'Location': 'https://otherpage.com', 'Cache-Control': 'public'}}, { something: 'something' });
  });

  afterEach(function() {
    sandbox.restore();
  });

  it('should return error, headers and body object', (done) => {
    const r = new Request(new BlackHole());

    r.request('https://example.com', true, function(error, response, body) {
      expect(error).to.be.an.instanceOf(Object);
      expect(response).to.an.instanceOf(Object);
      expect(body).to.be.an.instanceOf(Object);
      done();
    });
  });

  it('should return all headers in lowercase', (done) => {
    const r = new Request(new BlackHole());

    r.request('https://example.com', true, function(error, response, body) {
      expect(Object.keys(response.headers)).to.deep.equal([
        'content-type',
        'location',
        'cache-control',
      ]);
      done();
    });
  });
});
