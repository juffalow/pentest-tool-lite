#!/usr/bin/env node

import program from 'commander';
import Pentest from './pentest';
import Report from './Report';
import CommandLineFormat from './report/format/CommandLine';
import winston from 'winston';
import Request from './request';
import BlackHole from './request/cache/BlackHole';
import parseHtml from './functions/parseHtml';
import getResources from './functions/getResources';
import resourcesToDirectories from './functions/resourcesToDirectories';

import HTTPS from './security/HTTPS';
import HSTS from './security/HSTS';
import Cookies from './security/Cookies';
import FingerPrint from './security/FingerPrint';
import XXSSProtection from './security/XXSSProtection';
import XFrameOptions from './security/XFrameOptions';
import DirectoryIndexing from './security/DirectoryIndexing';

import JavaScript from './html/JavaScript';
import CSS from './html/CSS';
import Image from './html/Image';

import Lighthouse from './lighthouse/Lighthouse';

import RemoveDefaultFiles from './wordpress/RemoveDefaultFiles';

import { version } from '../package.json';

import { TYPE_OK } from './pentest/Result';

function initPentest(options) {
  const logger = winston.createLogger({
    level: options.debug ? 'debug' : (options.verbose ? 'verbose' : 'error'),
    format: winston.format.json(),
    silent: !options.debug || !options.verbose,
    transports: [
      new winston.transports.Console({
        format: winston.format.simple(),
      }),
    ]
  });

  const pentest = new Pentest(logger);
  const request = new Request(new BlackHole(), logger);
  
  pentest.add('security', () => {
    pentest.add('https', new HTTPS(request, logger));
    pentest.add('hsts', new HSTS(request, logger));
    pentest.add('cookies', new Cookies(request, logger));
    pentest.add('fingerprint', new FingerPrint(request, logger));
    pentest.add('x-xss-protection', new XXSSProtection(request, logger));
    pentest.add('x-frame-options', new XFrameOptions(request, logger));
    pentest.add('directoryindexing', new DirectoryIndexing(request, parseHtml, getResources, resourcesToDirectories, logger))
  });

  pentest.add('html', () => {
    pentest.add('javascript', new JavaScript(request, parseHtml, getResources, logger));
    pentest.add('css', new CSS(request, parseHtml, getResources, logger));
    pentest.add('image', new Image(request, parseHtml, getResources, logger));
  });

  pentest.add('lighthouse', () => {
    pentest.add('lh', new Lighthouse(request, logger));
  });

  pentest.add('wordpress', () => {
    pentest.add('removedefaultfiles', new RemoveDefaultFiles(request, logger));
  });

  return pentest;
}

function run(url, options) {
  const pentest = initPentest(options);

  pentest.run(url, options.grep, options.exclude)
    .then((results) => {
      const report = new Report(new CommandLineFormat());
      report.write(results);

      const failingTests = results.filter(result => result.resultType !== TYPE_OK);
      if (failingTests.length > 0 && !options.silent) {
        process.exitCode = 1;
      }
    }).catch((error) => {
      if (error.code === 'ENOTFOUND') {
        console.error('Address not found! Please check your internet connection and the URL.');
        process.exitCode = 1;
        return;
      }
      console.error('Something went wrong!');
      console.error('You can create an issue here: https://github.com/juffalow/pentest-tool-lite/issues');
      console.error('Please, fill there information about which version of pentest-tool-lite you are using, node version, arguments you used and the error detail.');
      console.error('I.e.:');
      console.error('pentest-tool-lite:', version);
      console.error('node:', process.versions.node);
      console.error('arguments:', process.argv.slice(2).join(' '));
      console.log();
      console.error(error);
      process.exitCode = 1;
    });
};

function listTests(options) {
  const pentest = initPentest(options);
  const tests = pentest.getTests();
  tests.forEach(test => console.log(test.namespace + '.' + test.name));
}

program
  .version(version)
  .usage('[options] <URL>')
  .description(`
    Check your website ( or any other website ) for common vulnerabilities.
  `)
  .option('--grep <tests>', 'only run tests matching tests separated by comma', (value) => value.split(','), [ '' ])
  .option('--exclude <tests>', 'exclude tests matching tests separated by comma', (value) => value.split(','), [])
  .option('-s, --silent', 'failing tests will not cause the program to exit with error', false)
  .option('-d, --debug', 'debug mode', false)
  .option('-v, --verbose', 'be more verbose/talkative during the operation', false)
  .action(function(url, cmd) {
    run(url, cmd);
  });

program
  .command('tests')
  .description('lists all available tests')
  .action(function(cmd) {
    listTests(cmd);
  });

program.parse(process.argv);
