#!/usr/bin/env node

import program from 'commander';
import Pentest from './pentest';
import Report from './Report';
import CommandLineFormat from './report/format/CommandLine';
import winston from 'winston';
import Request from './request';
import BlackHole from './request/cache/BlackHole';
import parseHtml from './functions/parseHtml';
import getResources from './functions/getResources';

import HTTPS from './security/HTTPS';
import HSTS from './security/HSTS';
import Cookies from './security/Cookies';
import FingerPrint from './security/FingerPrint';
import XXSSProtection from './security/XXSSProtection';
import XFrameOptions from './security/XFrameOptions';

import JavaScript from './html/JavaScript';
import CSS from './html/CSS';
import Image from './html/Image';

function run(url, options) {
  const pentest = new Pentest();
  const request = new Request(new BlackHole());
  
  pentest.add('security', () => {
    pentest.add('https', new HTTPS(request, winston));
    pentest.add('hsts', new HSTS(request, winston));
    pentest.add('cookies', new Cookies(request, winston));
    pentest.add('fingerprint', new FingerPrint(request, winston));
    pentest.add('x-xss-protection', new XXSSProtection(request, winston));
    pentest.add('x-frame-options', new XFrameOptions(request, winston));
  });

  pentest.add('html', () => {
    pentest.add('javascript', new JavaScript(request, parseHtml, getResources, winston));
    pentest.add('css', new CSS(request, parseHtml, getResources, winston));
    pentest.add('image', new Image(request, parseHtml, getResources, winston));
  });

  pentest.run(url, '')
    .then((results) => {
      const report = new Report(new CommandLineFormat());
      report.write(results);
    });
};

program
  .version('1.0.0')
  .usage('[options] <URL>')
  .description(`
    Check your website ( or any other website ) for common vulnerabilities.
  `)
  .option('--grep [namespace / name]', 'run only selected checks', '')
  .option('-d, --debug', 'debug mode')
  .option('-v, --verbose', 'be more verbose/talkative during the operation')
  .parse(process.argv);

if( program.verbose ) {
  winston.level = 'verbose';
}

if( program.debug ) {
  winston.level = 'debug';
}

if( program.args.length === 0 ) {
  console.error('URL is missing!', 'For help, type pentest-tool-lite --help.');
  process.exit(0);
}

run(program.args[0], program);
