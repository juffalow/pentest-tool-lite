#!/usr/bin/env node

import { Command } from 'commander';
import readline from 'readline';
import { URL } from 'url';
import { version } from '../package.json';
import Sitemap from './commands/Sitemap';
import config, { mergeConfig } from './config';
import Report from './report';
import Security from './security';
import HTML from './html';
import { Result } from './Test';

const program = new Command();

program
  .version(version)
  .arguments('<url>')
  .description(`
    Check your website ( or any other website ) for common vulnerabilities.
  `)
  .option('--grep <tests>', 'only run tests matching tests separated by comma', (value) => value.split(','), [])
  .option('--exclude <tests>', 'exclude tests matching tests separated by comma', (value) => value.split(','), [])
  .option('--no-cache', 'do not use cache for requests', false)
  .option('--logger <level>', 'DEBUG, INFO, VERBOSE, WARNING, ERROR, NONE', 'NONE')
  .option('--reportType <type>', 'SHORT, FULL', 'SHORT')
  .option('--reportFormat <format>', 'CMD, JSON', 'CMD')
  .action(async (url, options) => {
    mergeConfig({
      exclude: options.exclude,
      grep: options.grep,
      logger: {
        ...config.logger,
        level: options.logger,
      },
      report: {
        ...config.report,
        type: options.reportType,
        format: options.reportFormat,
      },
      request: {
        cache: {
          type: options.cache ? 'UNLIMITED' : 'BLACK_HOLE',
        },
      },
    });

    const security = new Security();
    const html = new HTML();
    const securityResult = <Result> await security.run({ url });
    const htmlResult = <Result> await html.run({ url });

    const report = Report.get(config.report.format);
    report.write([ securityResult , htmlResult ]);
  });

program
  .command('sitemap <URL>')
  .description(`
    List all URLs in sitemap.
  `)
  .option('--path', 'path to sitemap', 'sitemap.xml')
  .action(async (url: string) => {
    const sitemap = new Sitemap();
    const urls = await sitemap.run(url);
    urls.forEach((sitemapUrl: string) => console.log(sitemapUrl));
  });

program
  .command('random')
  .description(`
    List all URLs in sitemap.
  `)
  .option('--probability <probability>', 'the chance the line will pass', (value) => parseInt(value))
  .action((options) => {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false,
    });

    rl.on('line', (line) => {
      try {
        new URL(line);
        if (Math.random() <= (options.probability / 100)) {
          console.log(line);
        }
      } catch {
        return;
      }
    });
  });

program.parse(process.argv);
