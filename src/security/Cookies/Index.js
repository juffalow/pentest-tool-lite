// @flow
import Result, { TYPE_OK, TYPE_INCORRECT } from '../../pentest/Result';

export default class Cookies {
  request: Object;
  logger: Object;

  /**
   * 
   * @param {Object} request
   * @param {Object} logger
   */
  constructor(request: Object, logger: Object) {
    this.request = request;
    this.logger = logger;
  }

  /**
   * 
   * @param {string} url
   * @returns {Promise}
   */
  async execute(url: string): Promise<Object> {
    this.logger.verbose('Executing Cookies test...');

    const result = await this.request.get(url);
    let tests = [];

    if (result.response.headers.hasOwnProperty('set-cookie')) {
      const regx = new RegExp('.*(secure; HttpOnly)$', 'i');
      const cookies = result.response.headers['set-cookie'];
      if (typeof cookies === 'object') {
        const unsecure = cookies.filter((cookie) => {
          this.logger.verbose('Cookie content: ' + cookie);
          if (!regx.test(cookie)) {
            tests = [...tests, new Result(cookie, TYPE_INCORRECT)];
            return true;
          }
          tests = [...tests, new Result(cookie, TYPE_OK)];
          return false;
        });
  
        if (unsecure.length > 0) {
          return new Result(url, TYPE_INCORRECT, tests);
        }
      }
    }
    return new Result(url, TYPE_OK, tests);
  }
}