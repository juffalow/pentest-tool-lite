// @flow
import Result, { TYPE_OK, TYPE_ERROR } from '../../pentest/Result';

export default class DirectoryIndexing {
  request: Object;
  parseHtml: Function;
  getResources: Function;
  resourcesToDirectories: Function;
  logger: Object;
  
  /**
   * 
   * @param {Object} request
   * @param {Function} parseHtml
   * @param {Function} getResources
   * @param {Function} resourcesToDirectories
   * @param {Object} logger
   */
  constructor(request: Object, parseHtml: Function, getResources: Function, resourcesToDirectories: Function, logger: Object) {
    this.request = request;
    this.parseHtml = parseHtml;
    this.getResources = getResources;
    this.resourcesToDirectories = resourcesToDirectories;
    this.logger = logger;
  }

  hasDirectoryIndexingEnabled(result: Object): boolean {
    return result.body.indexOf('<title>Index of') > -1 || result.body.indexOf('<h1>Index of') > -1;
  }

  async checkDirectory(url: string): Object {
    const result = await this.request.get(url);

    return new Result(url, this.hasDirectoryIndexingEnabled(result) ? TYPE_ERROR : TYPE_OK, []);
  }

  /**
   * 
   * @param {string} url
   * @returns {Object}
   */
  async execute(url: string): Object {
    this.logger.verbose('Executing DirectoryIndexing test...');

    const result = await this.request.get(url);
    const parsedHtml = await this.parseHtml(result);
    const resources = await this.getResources(parsedHtml);
    const directories = this.resourcesToDirectories(resources);

    const results = await Promise.all(directories.map(async (directory) => await this.checkDirectory(directory)));

    return new Result(url, results.filter(result => result.resultType !== TYPE_OK).length === 0 ? TYPE_OK : TYPE_ERROR, results);
  }
}