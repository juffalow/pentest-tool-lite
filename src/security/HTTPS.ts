import Test, { TestParameters } from '../Test';
import request from '../request';
import logger from '../logger';

/**
 * Hypertext Transfer Protocol Secure
 *
 * The script first transform the url to be unsecure
 * and then make the request. The answer has to be
 * redirect to secure version.
 *
 * Some sites requires www (or requires version without wwww)
 * and if the request is not as desired, it first redirects
 * to desired version (without https) and then again redirects
 * to version with https. This is also wrong.
 *
 * @see https://en.wikipedia.org/wiki/HTTPS
 */
class HTTPS extends Test {

  public async test({ url }: TestParameters): Promise<any> {
    logger.info('Starting HTTPS test...');
    const unsecureUrl = this.toHttp(url);
    const response = await request.get(unsecureUrl, { redirect: 'manual' });

    if (!this.isRedirect(response)) {
      return {
        status: 'ERROR',
        title: 'HTTPS',
        description: `Request to not secure url returned ${response.statusCode}!`,
      };
    }

    if (!this.isRedirectSecure(response)) {
      return {
        status: 'ERROR',
        title: 'HTTPS',
        description: `Request to not secure url returned non-secure redirect url ${response.headers.location}!`,
      };
    }

    return {
      status: 'SUCCESS',
      title: 'HTTPS',
      description: `Request to not secure url responded with status code ${response.statusCode} and redirect url ${response.headers.location}.`,
    };
  }

  private isRedirect(response: any): boolean {
    return (response.statusCode === 301 || response.statusCode === 307) && 'location' in response.headers;
  }

  private isRedirectSecure(response: any): boolean {
    return response.headers.location.startsWith('https');
  }

  private toHttp(url: string): string {
    return url.replace('https://', 'http://');
  }
}

export default HTTPS;
