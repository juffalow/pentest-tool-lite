// @flow
import Result, { TYPE_OK, TYPE_INCORRECT } from '../../pentest/Result';

export default class FingerPrint {
  request: Object;
  logger: Object;

  /**
   * 
   * @param {Function} fetch
   */
  constructor(request: Object, logger: Object) {
    this.request = request;
    this.logger = logger;
  }

  /**
   * 
   * @param {Object} headers
   * @returns {booelan}
   */
  hasFingerPrintHeader(headers: Object): boolean {
    return headers.hasOwnProperty('x-powered-by') || headers.hasOwnProperty('x-generator') || headers.hasOwnProperty('server');
  }

  /**
   * 
   * @param {string} url
   * @returns {Promise}
   */
  async execute(url: string): Promise<Object> {
    this.logger.verbose('Executing FingerPrint test...');

    const result = await this.request.get(url);

    if (this.hasFingerPrintHeader(result.response.headers)) {
      return new Result(url, TYPE_INCORRECT, []);
    }

    return new Result(url, TYPE_OK, []);
  }
}