import HSTS from '../HSTS';
import request from '../../request';
import { Result } from '../../Test';

test('HSTS test with correct header', async () => {
  const hsts = new HSTS();
  const mock = jest.spyOn(request, 'get').mockImplementation(async (): Promise<any> => {
    return new Promise((resolve) => {
      resolve({
        headers: {
          'strict-transport-security': 'max-age=63072000; preload',
        },
      });
    });
  });

  const result = <Result> await hsts.run({ url: 'https://juffalow.com' });

  expect(result.status).toEqual('SUCCESS');

  mock.mockRestore();
});

test('HSTS test with low max age value', async () => {
  const hsts = new HSTS();
  const mock = jest.spyOn(request, 'get').mockImplementation(async (): Promise<any> => {
    return new Promise((resolve) => {
      resolve({
        headers: {
          'strict-transport-security': 'max-age=31535999; preload',
        },
      });
    });
  });

  const result = <Result> await hsts.run({ url: 'https://juffalow.com' });

  expect(result.status).toEqual('ERROR');

  mock.mockRestore();
});

test('HSTS test with missing HSTS header', async () => {
  const hsts = new HSTS();
  const mock = jest.spyOn(request, 'get').mockImplementation(async (): Promise<any> => {
    return new Promise((resolve) => {
      resolve({
        headers: {},
      });
    });
  });

  const result = <Result> await hsts.run({ url: 'https://juffalow.com' });

  expect(result.status).toEqual('ERROR');

  mock.mockRestore();
});
