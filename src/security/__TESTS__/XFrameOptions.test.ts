import XFrameOptions from '../XFrameOptions';
import request from '../../request';
import { Result } from '../../Test';

test('X-Frame-Options test with correct header', async () => {
  const pentest = new XFrameOptions();
  const mock = jest.spyOn(request, 'get').mockImplementation(async (): Promise<any> => {
    return new Promise((resolve) => {
      resolve({
        headers: {
          'x-frame-options': 'deny',
        },
      });
    });
  });

  const result = <Result> await pentest.run({ url: 'https://juffalow.com' });

  expect(result.status).toEqual('SUCCESS');

  mock.mockRestore();
});

test('X-Frame-Options test with missing X-Frame-Options header', async () => {
  const pentest = new XFrameOptions();
  const mock = jest.spyOn(request, 'get').mockImplementation(async (): Promise<any> => {
    return new Promise((resolve) => {
      resolve({
        headers: {}
      });
    });
  });

  const result = <Result> await pentest.run({ url: 'https://juffalow.com' });

  expect(result.status).toEqual('ERROR');

  mock.mockRestore();
});
