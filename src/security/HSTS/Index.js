// @flow
import Result, { TYPE_OK, TYPE_INCORRECT, TYPE_ERROR } from '../../pentest/Result';

export default class HSTS {
  request: Object;
  logger: Object;
  
  /**
   * 
   * @param {Function} fetch
   */
  constructor(request: Object, logger: Object) {
    this.request = request;
    this.logger = logger;
  }

  /**
   * 
   * @param {string} url
   * @returns {Promise}
   */
  async execute(url: string): Promise<Object> {
    this.logger.verbose('Executing HSTS test...');

    const result = await this.request.get(url);

    if (!result.response.headers.hasOwnProperty('strict-transport-security')) {
      return new Result(url, TYPE_ERROR, []);
    } else {
      const attributes = result.response.headers['strict-transport-security'].replace(' ', '').split(';');
      const maxAge = attributes.filter((attribute) => { return attribute.startsWith('max-age'); }).shift().replace('max-age=', '');
  
      if (parseInt(maxAge) < 31536000) {
        return new Result(url, TYPE_INCORRECT, []);
      }
    }

    return new Result(url, TYPE_OK, []);
  }
}