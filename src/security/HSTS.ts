import Test, { TestParameters, Result } from '../Test';
import request from '../request';
import logger from '../logger';

/**
 * HTTP Strict Transport Security
 *
 * Recommended value is at least one year (31536000).
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
 * @see https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
 */
class HSTS extends Test {
  public name = 'HSTS';
  protected minValue = 31536000;

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info('Starting HSTS test...');
    const response = await request.get(url);

    if (!Object.prototype.hasOwnProperty.call(response.headers, 'strict-transport-security')) {
      return {
        status: 'ERROR',
        title: 'HSTS',
        description: 'The strict-transport-security header is not present!',
      };
    }

    const attributes = response.headers['strict-transport-security'].replace(' ', '').split(';');
    const maxAge = attributes.filter((attribute) => {
      return attribute.startsWith('max-age');
    }).shift().replace('max-age=', '');

    if (parseInt(maxAge, 10) < this.minValue) {
      return {
        status: 'ERROR',
        title: 'HSTS',
        description: `The value of strict-transport-security header is ${maxAge}. Minimum value is ${this.minValue}!`,
      };
    }

    return {
      status: 'SUCCESS',
      title: 'HSTS',
      description: `The value of strict-transport-security header is ${maxAge}.`,
    };
  }
}

export default HSTS;
