const find = (object: any, test: (object: unknown) => boolean) => {
  if (Object.prototype.toString.call(object) === '[object Array]') {
    return traverseArray(object, test);
  } else if (typeof object === 'object' && object !== null) {
    return traverseObject(object, test);
  }

  if (test(object)) {
    return object;
  }

  return null;
};

const traverseArray = (array: any[], test: (object: unknown) => boolean) => {
  let values = [];

  array.forEach((value) => {
    if (typeof value === 'object') {
      values = values.concat(find(value, test));
    } else if (test(value)) {
      values = values.concat(value);
    }
  });

  return values;
};

const traverseObject = (object: any, test: (object: unknown) => boolean) => {
  let values = [];

  Object.keys(object).map((key: string) => {
    if (typeof object[key] === 'object') {
      values = values.concat(find(object[key], test));
    }

    if (Object.prototype.toString.call(object) === '[object Array]') {
      values = values.concat(find(object[key], test));
    }
  });

  return values;
};

export default find;
