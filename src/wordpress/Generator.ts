import Test, { TestParameters, Result } from '../Test';
import request from '../request';
import logger from '../logger';
import { parseHtml, getGenerator } from '../functions';

class Generator extends Test {
  public name = 'Generator';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info('Starting default files test...');

    const results = [];

    results.push(await this.checkHTML(url));
    results.push(await this.checkRSSFeed(url));

    return {
      status: this.getStatus(results.map(result => result.status)),
      title: this.name,
      description: '',
      results: results,
    };
  }

  protected async checkHTML(url: string): Promise<Result> {
    const response = await request.get(url);
    const html = await parseHtml(response);
    const generators = await getGenerator(html);

    if (generators.some((generator: any) => generator.attribs.content.toLowerCase().includes('wordpress'))) {
      return {
        status: 'WARNING',
        title: 'HTML Tag',
        description: 'Page contains inmformation about its generator!',
      };
    }

    return {
      status: 'SUCCESS',
      title: 'HTML Tag',
      description: 'Page doesn\t contain any information about its generator.',
    };
  }

  protected async checkRSSFeed(url: string): Promise<Result> {
    const response = await request.get(`${url.endsWith('/') ? url.substring(0, url.length - 1) : url}/feed/`);

    if (response.response.headers.get('content-type').startsWith('application/rss+xml') && response.body.includes('<generator>https://wordpress.org')) {
      return {
        status: 'WARNING',
        title: 'RSS Feed',
        description: 'RSS feed contains information about its generator!',
      };
    }

    return {
      status: 'SUCCESS',
      title: 'RSS Feed',
      description: 'RSS feed doesn\t contain any information about its generator.',
    };
  }
}

export default Generator;
