import whois from 'whois';
import Test, { TestParameters, Result } from '../Test';
import logger from '../logger';
import getDomain from '../functions/getDomain';

class RegistrationDate extends Test {
  public name = 'RegistrationDate';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info(`Starting ${this.constructor.name} test...`);

    const registrationDate = await this.getRegistrationDate(getDomain(url));

    const diffInMs = (new Date(registrationDate)).getTime() - (new Date()).getTime();
    const diffInDays = diffInMs / (1000 * 60 * 60 * 24);

    return {
      status: diffInDays < 7 ? 'ERROR' : diffInDays < 30 ? 'WARNING' : 'SUCCESS',
      title: this.constructor.name,
      description: `Approximately ${Math.floor(diffInDays)} days until domain expires.`,
    };
  }

  protected async getRegistrationDate(domain: string): Promise<string> {
    const date: string = await new Promise((resolve, reject) => {
      whois.lookup(domain, function(err, data) {
        if (err) {
          reject(err);
        }
        
        const d = data.split('\n')
          .filter((line: string) => line.includes('Expiration Date'))
          .map((line: string) => line.split(': ')[1].trim())
          .shift();

        resolve(d);
      });
    });

    return date;
  }
}

export default RegistrationDate;
