import dns from 'dns';
import Test, { TestParameters, Result } from '../Test';
import logger from '../logger';

class DMARC extends Test {
  public name = 'DMARC';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info(`Starting ${this.constructor.name} test...`);

    const response: any = await new Promise((resolve, reject) => {
      dns.resolveTxt(`_dmarc.${(new URL(url).hostname)}`, (err, records) => {
        if (err) {
          reject(err);
        }

        resolve(records);
      }); 
    });

    if (response.length === 0) {
      return {
        status: 'WARNING',
        title: this.constructor.name,
        description: 'No DMARC record found for this domain.',
      }
    }

    const record = response.shift().shift();

    if (record.includes('p=none')) {
      return {
        status: 'ERROR',
        title: this.constructor.name,
        description: 'Email that fails DMARC Compliance tests will be delivered to the recipient\'s inbox.',
      };
    }

    if (record.includes('p=quarantine')) {
      return {
        status: 'WARNING',
        title: this.constructor.name,
        description: 'Email that fails DMARC Compliance tests will be marked as spam.',
      };
    }

    if (record.includes('p=reject')) {
      return {
        status: 'SUCCESS',
        title: this.constructor.name,
        description: 'Email that fails DMARC Compliance tests will be rejected.',
      };
    }

    return {
      status: 'ERROR',
      title: this.constructor.name,
      description: 'Invalid DMARC policy found!',
    };
  }
}

export default DMARC;
