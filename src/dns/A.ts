import dns from 'dns';
import whois from 'whois';
import Test, { TestParameters, Result } from '../Test';
import logger from '../logger';

class A extends Test {
  public name = 'A';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info(`Starting ${this.constructor.name} test...`);

    const response = await new Promise((resolve, reject) => {
      dns.lookup((new URL(url).hostname), { all: true }, (err, addresses) => {
        if (err) {
          return reject(err);
        }

        resolve(addresses);
      }); 
    });

    const addresses = await Promise.all((response as any).map(async (address: any) => {
      const organization = await this.getOrganization(address.address);

      return `${address.address} - ${organization}`;
    }));

    return {
      status: 'SUCCESS',
      title: this.constructor.name,
      description: addresses.join('\n'),
    };
  }

  protected async getOrganization(ip: string): Promise<string> {
    const organization: string = await new Promise((resolve, reject) => {
      whois.lookup(ip, function(err, data) {
        if (err) {
          return reject(err);
        }
        
        const organization = data.split('\n')
          .filter((line: string) => line.includes('OrgName'))
          .map((line: string) => line.split(':')[1].trim())
          .pop();

        resolve(organization);
      });
    });

    return organization;
  }
}

export default A;
