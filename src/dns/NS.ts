import whois from 'whois';
import Test, { TestParameters, Result } from '../Test';
import logger from '../logger';
import getDomain from '../functions/getDomain';

class NS extends Test {
  public name = 'NS';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info(`Starting ${this.constructor.name} test...`);

    const nameServers = await this.getNameServers(getDomain(url));

    return {
      status: 'SUCCESS',
      title: this.constructor.name,
      description: nameServers.join('\n'),
    };
  }

  protected async getNameServers(domain: string): Promise<string[]> {
    const nameServers: string[] = await new Promise((resolve, reject) => {
      whois.lookup(domain, function(err, data) {
        if (err) {
          reject(err);
        }
        
        const nameServers = data.split('\n')
          .filter((line: string) => line.includes('Name Server'))
          .map((line: string) => line.split(':')[1].trim());

        resolve(nameServers);
      });
    });

    return nameServers;
  }
}

export default NS;
