import config from './config';

export type TestParameters = {
  url: string;
}

export type Status = 'FATAL' | 'ERROR' | 'WARNING' | 'SUCCESS';

export type Result = {
  status: Status;
  title: string;
  description: string;
  results?: Array<Result>;
}

/**
 * @see https://stackoverflow.com/questions/13651945/what-is-the-use-of-module-parent-in-node-js-how-can-i-refer-to-the-requireing
 */
delete require.cache[__filename];

export default abstract class Test {
  protected tests: Array<Test> = [];

  public async run(params: TestParameters): Promise<Result | Array<Result>> {
    let result = null;

    try {
      result = await this.test(params);
    } catch (err) {
      console.error(err);
    }

    return result;
  }

  protected abstract async test(params: TestParameters): Promise<Result | Array<Result>>;

  protected getTests(): Array<Test> {
    return this.tests.filter((test) => {
      return this.canRunTest(test.getFullName());
    });
  }

  protected canRunTest(fullName: string): boolean {
    if (config.grep.length > 0) {
      return config.grep.some((grep) => fullName.indexOf(grep) !== -1);
    }

    if (config.exclude.length > 0) {
      return !config.exclude.some((exclude) => fullName.indexOf(exclude) !== -1);
    }

    return true;
  }

  public getFullName(): string {
    const absolutePath = module.parent.filename.replace(__dirname, '');
    const namespace = absolutePath.substr(1, absolutePath.lastIndexOf('/') - 1);
    return `${namespace}/${this.constructor.name}`.replace(new RegExp('/', 'g'), '.').toLowerCase();
  }
}
