import Test, { TestParameters, Result } from '../Test';
import request from '../request';
import logger from '../logger';
import { getTitle, parseHtml } from '../functions';

class Title extends Test {
  public name = 'Title';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info(`Starting ${this.constructor.name} test...`);

    const response = await request.get(url);
    const html = await parseHtml(response);
    const title = getTitle(html);
    const subTests = this.checkTitle(title);

    return {
      status: this.getStatus(subTests.map(test => test.status)),
      title: this.constructor.name,
      description: '',
      results: subTests,
    };
  }

  private checkTitle(title: string | string[]): Array<Result> {
    const results = [];

    results.push({
      status: typeof title !== undefined && title.length > 0 ? 'SUCCESS' : 'WARNING',
      title: 'Title tag',
    });

    results.push({
      status: Array.isArray(title) ? 'ERROR' : 'SUCCESS',
      title: 'Duplicate title tag',
      description: `HTML should contain just one title tag.`,
    });

    results.push({
      status: title.length <= 60 ? 'SUCCESS' : 'WARNING',
      title: 'Title length',
      description: `Title length should be under 60 characters and it is ${title.length}.`,
    });

    return results;
  }
}

export default Title;
