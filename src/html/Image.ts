import Test, { TestParameters, Result } from '../Test';
import request from '../request';
import logger from '../logger';
import { getImages, parseHtml } from '../functions';

class Image extends Test {
  public name = 'Image';

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info('Starting Image test...');
    const response = await request.get(url);
    const html = await parseHtml(response);
    const images = getImages(html);
    const subTests = await this.checkImages(images);

    return {
      status: this.getStatus(subTests.map(test => test.status)),
      title: 'Image',
      description: '',
      results: subTests,
    };
  }

  private async checkImages(images: Array<string>): Promise<Array<Result>> {
    const results = [];

    for (const image of images) {
      const filename = image.substr(image.lastIndexOf('/') + 1);
      logger.verbose(`Checking ${filename}...`);

      const result = await request.get(image);

      const isFileAvailabe = {
        status: this.isFileAvailable(result) ? 'SUCCESS' : 'ERROR',
        title: 'Available',
        description: '',
      };
      const isCached = {
        status: this.isCached(result) ? 'SUCCESS' : 'ERROR',
        title: 'Cached',
        description: '',
      };
      const hasXContentTypeOptionsHeader = {
        status: this.hasXContentTypeOptionsHeader(result) ? 'SUCCESS' : 'WARNING',
        title: 'X-Content-Type-Options',
        description: '',
      }

      results.push({
        status: 'SUCCESS',
        title: filename,
        description: '',
        results: [
          isFileAvailabe,
          isCached,
          hasXContentTypeOptionsHeader,
        ],
      });
    }

    return results;
  }

  protected isFileAvailable(result: any): boolean {
    if (result.response.statusCode === 404 || result.response.statusCode === 500) {
      return false;
    }
    return true;
  }

  protected isCached(result: any): boolean {
    return Object.prototype.hasOwnProperty.call(result.response.headers, 'cache-control');
  }

  protected hasXContentTypeOptionsHeader(result: any): boolean {
    return Object.prototype.hasOwnProperty.call(result.response.headers, 'x-content-type-options');
  }
}

export default Image;
