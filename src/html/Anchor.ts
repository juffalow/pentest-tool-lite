import Test, { TestParameters, Result } from '../Test';
import request from '../request';
import logger from '../logger';
import { getAnchors, parseHtml } from '../functions';

class Anchor extends Test {

  public async test({ url }: TestParameters): Promise<Result> {
    logger.info(`Starting ${this.constructor.name} test...`);
    const response = await request.get(url);
    const html = await parseHtml(response);
    const anchors = getAnchors(html);
    const subTests = await this.check(anchors);

    return {
      status: subTests.some(check => check.status === 'WARNING') ? 'WARNING' : 'SUCCESS',
      title: this.constructor.name,
      description: '',
      results: subTests,
    };
  }

  private async check(anchors: Array<string>): Promise<Array<Result>> {
    const results = [];

    for (const anchor of anchors) {
      logger.verbose(`Checking ${anchor}...`);

      const result = await request.get(anchor);

      const isFileAvailabe = {
        status: this.isFileAvailable(result) ? 'SUCCESS' : 'ERROR',
        title: 'Available',
        description: '',
      };

      results.push({
        status: 'SUCCESS',
        title: anchor,
        description: '',
        results: [
          isFileAvailabe,
        ],
      });
    }

    return results;
  }

  protected isFileAvailable(result: any): boolean {
    if (result.response.statusCode === 404 || result.response.statusCode === 500) {
      return false;
    }
    return true;
  }
}

export default Anchor;
