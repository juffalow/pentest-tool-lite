import Message from './message';
import Messages from './messages';
import importance from './sort/importance';

const resultToMessage = (result) => {
  if (!result.hasOwnProperty('name')) {
    return (new Message(result.content, result.resultType)).setMessages(result.hasOwnProperty('tests') ? result.tests.map(test => resultToMessage(test)) : []);
  }
  const detail = Messages[result.name];
  const message = new Message(detail.name, result.resultType);
  message.setImportance(detail.importance);
  message.setDescription(detail.description[result.resultType].short);
  message.setMessages(result.tests.map(test => resultToMessage(test)));

  return message;
}

class Report {
  constructor(formatter) {
    this.formatter = formatter;
  }

  write(results: Array<Object>) {
    const messages = this.resultsToMessages(results).sort(importance);
    this.formatter.format(messages);
  }

  resultsToMessages(results): Array<Message> {
    return results.map((result) => {
      return resultToMessage(result);
    });
  }
}

export default Report;
