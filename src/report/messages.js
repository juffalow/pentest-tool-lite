const TYPE_OK = 1;
const TYPE_INCORRECT = 2;
const TYPE_ERROR = 3;

export default {
  'root.security.https': {
    name: 'HTTPS',
    importance: 99,
    description: {
      1: {
        short: 'HTTPS is set properly!',
      },
      3: {
        short: 'HTTPS is not set properly!',
      },
      full: 'The page is available only ( or also ) over HTTP. This means it doesn\'t have any ssl certificate or if it has one, it doesn\'t force the user to use it.',
    },
  },
  'root.security.hsts': {
    name: 'HSTS',
    importance: 98,
    description: {
      1: {
        short: 'HSTS is set properly!',
      },
      2: {
        short: 'HSTS has low max-age value!',
      },
      3: {
        short: 'HSTS is missing!',
      },
      full: 'HTTP Strict Transport Security lets a web site inform the browser that it should never load the site using HTTP and should automatically convert all attempts to access the site using HTTP to HTTPS requests instead.',
      url: [
        'https://developer.mozilla.org/en-US/docs/Glossary/HSTS',
      ],
    },
  },
  'root.security.cookies': {
    name: 'Cookies',
    importance: 85,
    description: {
      1: {
        short: 'Cookies are set properly!',
      },
      2: {
        short: 'Missing "secure; httpOnly" flags in cookie(s)!',
      },
      3: {
        short: 'Missing "secure; httpOnly" flags in cookie(s)!',
      },
      full: 'A secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. o prevent cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript\'s Document.cookie API; they are only sent to the server.',
      url: [
        'https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies', 
      ],
    },
  },
  'root.security.fingerprint': {
    name: 'Fingerprint',
    importance: 60,
    description: {
      1: {
        short: 'Fingerprint header is not present!',
      },
      2: {
        short: 'At least one fingerprint header is present!',
      },
      3: {
        short: 'At least one fingerprint header is present!',
      },
      full: 'Check all Headers if there is any sort of apache, nginx, wordpress ones making it easier for the attacker to identify what is the target platform.',
    },
  },
  'root.security.x-xss-protection': {
    name: 'X-XSS-Protection',
    importance: 75,
    description: {
      1: {
        short: 'X-XSS-Protection header is set!',
      },
      2: {
        short: 'X-XSS-Protection header is not set!',
      },
      3: {
        short: 'X-XSS-Protection header is not set!',
      },
      full: 'The HTTP X-XSS-Protection response header is a feature of browser that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks. Although these protections are largely unnecessary in modern browsers when sites implement a strong Content-Security-Policy that disables the use of inline JavaScript.',
      url: [
        'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection',
      ],
    },
  },
  'root.security.x-frame-options': {
    name: 'X-Frame-Options',
    importance: 75,
    description: {
      1: {
        short: 'X-Frame-Options header is set!',
      },
      2: {
        short: 'X-Frame-Options header is not set!',
      },
      3: {
        short: 'X-Frame-Options header is not set!',
      },
      full: 'The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object> . Sites can use this to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites',
      url: [
        'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options',
      ],
    },
  },
  'root.security.directoryindexing': {
    name: 'Directory Indexing',
    importance: 75,
    description: {
      1: {
        short: 'Directory Indexing is disabled!!',
      },
      3: {
        short: 'Directory Indexing is enabled!',
      },
    },
  },
  'root.html.javascript': {
    name: 'JavaScript',
    importance: 65,
    description: {
      1: {
        short: 'All JavaScript files are available and passed all tests!',
      },
      2: {
        short: 'At least one JavaScript file is either not available or did not pass all tests!',
      },
      full: 'Iterate through all javascript files and check if each exists or if it is valid.',
    },
  },
  'root.html.css': {
    name: 'CSS',
    importance: 65,
    description: {
      1: {
        short: 'All CSS files are available and passed all tests!',
      },
      2: {
        short: 'At least one CSS file is either not available or did not pass all tests!',
      },
    },
  },
  'root.html.image': {
    name: 'Images',
    importance: 50,
    description: {
      1: {
        short: 'All image files are available!',
      },
      2: {
        short: 'At least one image file is not available!',
      },
    },
  },
  'root.lighthouse.lh': {
    name: 'Lighthouse',
    importance: 50,
    description: {
      1: {
        short: 'Executing lighthouse test',
      },
      2: {
        short: 'Executing lighthouse test',
      },
      3: {
        short: 'Executing lighthouse test',
      },
      url: [
        'https://peter.sh/experiments/chromium-command-line-switches/',
        'https://github.com/GoogleChrome/lighthouse/blob/master/docs/configuration.md',
        'https://github.com/GoogleChrome/lighthouse/blob/master/types/lhr.d.ts',
      ],
    },
  },
  'root.wordpress.removedefaultfiles': {
    name: 'removedefaultfiles',
    importance: 50,
    description: {
      1: {
        short: 'All unvanted files are remowed.',
      },
      2: {
        short: 'All unvanted files are remowed.',
      },
      3: {
        short: 'There are unwanted files.',
      },
    },
  },
};
