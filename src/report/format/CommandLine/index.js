// @flow
import Symbols from '../../symbols';
import { TYPE_OK, TYPE_INCORRECT, TYPE_ERROR } from '../../../pentest/Result';

class CommandLine {
  format(messages) {
    messages.forEach(message => this.logMessage(message, 0));
  }

  logMessage(message, level) {
    console.log("%s%s", Array(level + 1).join(' '), level === 0 ? this.formatTitle(message) : this.formatMessage(message));

    if (message.messages.length > 0) {
      message.messages.forEach(message => this.logMessage(message, level + 2));
    }
  }

  formatTitle(message: message): string {
    return this.getFormattedSymbol(message.resultType) + ' ' + message.name + ': ' + message.description;
  }

  formatMessage(message: Message): string {
    return this.getFormattedSymbol(message.resultType) + ' ' + message.name;
  }

  getFormattedSymbol(resultType) {
    switch(resultType) {
      case TYPE_OK:
        return '\x1b[32m' + Symbols.success + '\x1b[0m';
      case TYPE_INCORRECT:
        return '\x1b[33m' + Symbols.warning + '\x1b[0m';
      case TYPE_ERROR:
        return '\x1b[31m' + Symbols.error + '\x1b[0m';
    }
    return '\x1b[34m' + Symbols.info + '\x1b[0m';
  }
}

export default CommandLine;
